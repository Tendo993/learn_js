function lesson02(theme = 'Типы данных, операторы, методы и свойства') {

  // Примитивные типы данных
  let num = 10, // число, к числам также относятся Infinity и NaN
    string = 'Hello world', // строка
    bool = true, // логический, булеевый
    n = null, // null - специальный тип
    u = undefined, // не заданное значение
    s = Symbol(); // символ

  // Строки можно заключать в кавычки тримя способами:
  let name = 'Ilia',
    s1 = 'hello', // одинарные кавычки
    s2 = "my", // двойные кавычки
    s3 = `friend, ${name}`; // Обратные кавычки, позволяют вставлять в строку значение переменной, имя переменной заключается в ${ }.

  console.log(s1 + ' ' + s2 + ' ' + s3);

  // Объект и объектные типы данных
  let obj = {}, // Объект
    arr = [], // Массив
    regExp = /w+/g, // Регулярное выражение
    func = function () {}; // функция
  error = Error('error message'), // ошибки
    data = new Date(); // Дата

  // Всего в javascript 7 типов данных.

  console.log(typeof (n)); // Вывести в консоль тип данных переменной n.

  //  || - логическое "или"
  //№  ! - логическое "не"
  //  && - логическое "и"


  //  Логическое " И "
  let a = x && y; // Присвоит переменной a значение x если значение x может быть конвертировано в false, в противном случае a будет присвоино значение y. Таким образом при использовании булеевых значений логическое && возвращает true только когда оба операнда равны true, в противном случае возвращает false.
  let a1 = true && true, // true && true вернет true
    a2 = true && false, // true && false вернет false
    a3 = false && true, // false && true вернет false
    a4 = false && (3 == 4), // false && false вернет false
    a5 = 'cat' && 'dog', // true && true вернет dog
    a6 = false && 'cat', // false && true вернет false
    a7 = 'cat' && false; // true && false вернет false

  // Логическое " ИЛИ "
  let a = x || y; // Присвоит переменной a значение x если оно может быть конвертировано в true, в противном случае a будет присвоино значение y. Таким образом при использовании булеевых значений логическое || если любой из операндов равен true, если оба операнда равны false - присвоит false.
  let o1 = true || true, // true || true вернет true
    o2 = true || false, // true || false вернет true
    o3 = false || true, // false || true вернет true
    o4 = false || (3 == 4), // false || false вернет false
    o5 = 'cat' || 'dog', // true || true вернет cat
    o6 = false || 'cat', // false || true вернет cat
    o7 = 'cat' || false; // cat || false вернет cat

  // Орифметические операции

  // " +3 " - унарный плюс в оснавном используется для преобразования значения переменной в число
  // " -3 " - унарный минус используется для преобразования к отрицательному значения
  // "++i" "i++" "--i" "i--" префиксный и постфиксный инкримент/декримент
  // префиксный инкримент/декримент сначала изменяет переменную, а потом ее использует
  // постфиксный инкримент/декримент сначала использует переменную а потом ее изменяет

  // " > " - больше
  // " < " - меньше
  // " >= " - больше или равно
  // " <= " - меньше или равно
  // " === " - строгое соответствие, проверка на равенство без приведения типов
  // " !== " - строгое несоответствие
  // " == " - нестрогая проверка на равенство
  // " != " - 
  // На практике лучше использовать строгую проверку на равенство

  // Алгоритм сравнения строк:
  // 1) Сначала сравниваются первые символы строк.
  // 2) Если первый символ первой строки больше(меньше), чем первый символ второй, то первая строка больше(меньше) второй.
  // 3) Если первые символы равны, то таким же образом сровниваются уже вторые символы строк.
  // 4) Сравнение продолжается, пока не закончится одна из строк.
  // 5) Если обе строки заканчиваются одновременно, то они равны. Иначе, большей считается более длинная строка.
  // Сравнение символов происходит согласно их номеру в таблице юникода




  let x = 5;

  Math.sqrt(x); // метод извлечения корня
  Math.pow(x, 3); // Метод возведения x в 3-ю степень, "x ** 3" - новая форма записи возведения в степень
  Number.isInteger(x); // Вернет true если число целое и false если число дробное

  let str = 'Hello world';

  str.length; // Вернет длинну строки
  str.toUpperCase(); // Вернет строку в которой все символы будут в верхнем регистре
  str.toLowerCase(); // Вернет строку в которой все символы будут в нижнем регистре
  str.charAt(5); // Вернет символ который строит в строке под номером 5, важно учитывать что счет начинается с 0!
  str[5]; //  аналог str.charAt[5]
  str.substring(5, 15); // Вернет строку начиная с символа с индексом 5 и и заканчивая символом с индексом 14, если второй парамерт не указан - строка будет выведена с 5-го символа и до конца строки
  str.slice(5); // вернет строку начиная с символа с индексом 5
  str.slice(-8); // Вернет строку состоящую из 8-ми последних символов строки
  str.substr(5, 9); // Вернет 9 символов начиная с символа с индексом 5
  str.indexOf('world'); // Вернет индекс первого символа из найденой подстроки, если буквы/символа/слова в строке нет - метод вернет "-1"
  str.replace('world', 'friends'); // Заменит слово world на friends
  str.split(' '); // Нарезка строки на массив, в кавычках указывается раздеритель который будет указывать на отдельные элементы массива, в данном случае пробел
  // Все эти методы работы со строками не изменяют исходную строку, а возвращают новую строку
} // end lesson02

function lesson03(theme = 'Взаимодействие с пользователем, динамическая типизация и ветвление в JavaScript') {

  let question = confirm('Ты человек?'); // Выводит модальное окно с сообщение и кнопками "Ок" и "Отмена", возвращает true или false в зависимоти от того какая кнопка была нажата.
  let question2 = prompt('Как тебя зовут?', 'Илья'); // Выводит модальное окно с сообщением, значение поумолчанию, текстовым полем и кнопками "ок" и "отмена". Возвращает строку с текством от пользователя или null в случае если нажали кнопку "отмена".

  // Преобразование типов

  // number + string = string
  // number - string = number
  // numer * string = number
  // number / string = number
  // Если строка в результате вычитания, умножения, деления не может быть вычислена вернет NaN:
  // 'JS' / '5' = NAN

  // Преобразование в булеевый тип
  console.log(Boolean(5)); // true
  // или
  console.log(!5); // false
  console.log(!!5); // true

  // Преобразования которые возвращают false:
  Boolean(''); // false
  Boolean(0); // false
  Boolean(-0); // false
  Boolean(NaN); // false
  Boolean(null); // false
  Boolean(undefined); // false
  Boolean(false); // false

  // Любые значения, не входящие в этот список преобразуются в true, включая объекты, функции, массивы, даты, а также типа, определенные пользователем. Значения типа Symbol также преобразуются в true. пустые объекты и пустые массивы тоже преобразуются в true.

  Boolean({}); // true
  Boolean([]); // true
  Boolean(Symbol()); // true
  !!Symbol(); // true
  Boolean(function () {}); // true

  // Преобразования к типу String
  String([1, 2, 3]); // Строка '[1,2,3]'
  let x = 10 + ''; //  Строка '10'
  // метод .toString() работает только с числами и булиновыми значениями
  x = 10..toString(); // Строка '10'
  // Преобразование символов в строку возможно только через функцию String
  String(Symbol('my symbol')); //  строка 'Symbol('my symbol')'
  console.log('this is ' + true); // 'this is true'

  // Преобразование в число
  // Через функцию Number
  x = Number('10'); //  Число 10
  // Через унарный оператор ' + '
  x = +'10'; // Число 10
  // Использование унарного оператора в prompt
  let question = +prompt('Сколько тебе лет?'); // Значение будет преобразовываться в числовой тип, если пользователь введет не число - то значение будет NaN.
  console.log(parseInt('10', 10)); // Преобразует строку в число без плавающей запятой символ за символом пока не дойдет до конца строки или до символа не являющегося числом, вторым параметром принимает систему счисления. Если перед числовым символом будет любой другой символ - функция вернет NaN.
  console.log(parseFloat('10')); // Преабразует строку в число с плавающей запятой.
  console.log(Number('6' / '2')); // 3
  console.log(Number('string')); // NaN
  console.log(Number(undefined)); // NaN
  console.log(Number(true)); // 1
  console.log(Number(false)); // 0
  console.log(Number(null)); // 0

  // Не обычные преобразования
  console.log(null == 0); // false
  console.log(null == null); // true
  console.log(undefined == undefined); // true
  console.log(null == undefined); // true
  console.log(NaN == NaN); // false , NaN Не равен ни одному значению, даже самому себе.

  // Ветвление в javaScript

  if (true) {
    console.log('true');
  } else {
    console.log('false');
  }

  switch (n) {
    case 1: // case проверяет на строгое соответвие и если n = '1' - условие не сработает!
      console.log('1');
      break;
    case 2:
      console.log('2');
      break;
    case 3:
    case 4:
    case 5:
      console.log('группировка кейсов 3,4,5 когда для разных вариантов используется одна обработка');
      break;
    default:
      console.log('default');
  }

  // Тернарный оператор
  x ? y : z; //  Если x = true - выполнится y, если x = false - выполнится z;
  x === 5 ? console.log('x = 5') : console.log('x != 5');
  // Несколько тернарных операторов
  x === 5 ? console.log('x = 5') : x === 7 ? console.log('x = 7') : console.log('x != 5 && x != 7')

} // end lesson03

function lesson04(theme = 'Все о функциях, callback-функции, область видимости и замыкания') {
  // Имя функции должно быть глаголом, описывающим ее действия(поведение)
  // Функции начинающиеся с:
  // show.. - что-то показывают
  // get.. - возвращают значение
  // calc.. - что-то вычисляют
  // create.. - что-то создают
  // check.. - что-то проверяют и возвращают логическое значение
  // Негласное правило: одна функция - одно действие
  // Любая функция что-то возвращает, будь то значение, объект или undefined
  function outputMessage() { // Объявление функции. Такое объявление называется function declaration statement. Особенность такого объявления - облость видимости, функцию можно вызвать до ее объявления.
    console.log('Hello world');
  }
  outputMessage(); // Вызов функции

  // Если в теле функции return не указан - функция вернет undefined
  // Если в теле функции указан пустой return - функция вернет undefined

  function concat(name) { // name -  передаваемый параметр функции
    console.log(arguments); // Посмотреть список переданных аргументов
    return 'Hello ' + name; // return возвращает значение - строку 'Hello name', где name - значение передаваемого параметра
  }

  let res = concat('Петя'); // Присвоение переменной значения функции
  concat('Вася'); // Вася - передаваемый аргумент, если при вызове функции ей не передать параметр - поумолчанию он будет undefined. Если передать больше аргументов, чем принимает функция, ничего не произойдет, они использоваться не будут.

  // Параметры функции - это переменные
  // Аргументы функции - это значения переменных

  function showName(name, surname = 'Husiev') { // surname здесь имеет значение поумолчанию, оно будет использоваться если при вызове функции аргумент не будет указан, если аргумент указан - будет использоваться указанный при вызове аргумент
    console.log(name + ' ' + surname);
  }
  showName('Ilia', 'tendo'); // surname будет изменен с Husiev на tendo

  let concat1 = function (name) { // Такой вид объявления(присвоение фукции переменной) называется function definition expression или функциональное выражение. В отличии от объявления функции(function declaration statement) не поднимается вверх и его нельзя вызвать до его объявления
    return 'Hello ' + name;
  };

  // Анонимная функция - функция без имени
  function funcMath(a, b, plus, minus) { // В качестве параметров функции могут быть функции
    let res = (a > b) ? minus(a, b) : plus(a, b);
    console.log(res);
  }
  funcMath(5, 4,
    function (a, b) { // Анонимная функция объявляемая при вызове функции funcMath
      return a + b;
    },
    function (a, b) { // Анонимная функция объявляемая при вызове функции funcMath
      return a - b;
    });

  // callback - функция

  let logUser = function (userData) {
    if (userData === 'admin') {
      // console.log('Администратор'); В функция не желательно использовать console.log
      return 'Администратор';
    } else {
      // console.log('Пользователь'); В функция не желательно использовать console.log
      return 'Пользователь';
    }
  };

  let inputUser = function (user, callback) {
    let status = 'user';
    if (user === 'Андрей' || user === 'Василий') {
      status = 'admin';
    };
    return callback(status); // вызов callback-функции
  };

  // Еще один пример callback-функции

  function ask(question, yes, no) {
    if (confirm(question)) yes()
    else no();
  }
  ask(
    'Вы согласны?', // первый аргумент вызова функции ask
    function () {
      alert('Вы согласились.');
    }, // Второй аргумент вызова функции ask
    function () {
      alert('Вы отказались.');
    } // Третий аргумент вызова функции ask
  );

  console.log(inputUser('максим', logUser)); // logUser -  функция передаваемая для callback вызова

  // Облость видимости и замыкания

  function funcMath1() {
    let a = 10; // переменная a определенная в контексте функции funcMath1
    return function () { // функция внутри функции - это замыкание, поскольку внутрянняя функция сохраняет доступ к переменным функции-родителя
      console.log(a * a);
    };
  };
  funcMath1(); // При таком вызове ничего выведено не будет, потому что анонимная функция вызвана не будет и функция funcMath1 вернет ссылку на анонимную функцию
  let mathPow = funcMath1(); // Присвоение ссылки на анонимную функцию переменной mathPow
  mathPow(); // Вызов анонимной функции через ссылку mathPow.

  // После объявления переменной внутри функции - доступ к ней возможен только внутри функции.
  // Если в функции используется переменная, но она в функции не объявлена интерпретатор поднимется на уровень выше и будет искать переменную там.

  function createIncrementor(n) {
    return function (num) {
      return n + num;
    };
  };
  let addOne = createIncrementor(1); // Функция замкне в себе значение n = 1
  let addTen = createIncrementor(10); // Функция замкнет в себе значение n = 10

  console.log(addOne(5)); // Функция передаст num = 5, выведет 6;
  console.log(addTen(5)); // num = 5, выведет 15

  function urlGenerator(domain) {
    return function (url) {
      return `https://${url}.${domain}`;
    };
  };
  const comUrl = urlGenerator('com'); // Замкнул значение domain = com;
  const ruUrl = urlGenerator('ru'); // Замкнул значение domain = ru

  console.log(comUrl('google')); // https://google.com
  console.log(ruUrl('yandex')); // https://yandex.ru

} // end lesson04

function lesson05(theme = 'Все о циклах') {
  // Рекурсия - вызов функции внутри ее тела(вызов самой себя)
  function changeTires(snowTires) {
    snowTires--;
    console.log(snowTires);
    if (snowTires > 0) {
      changeTires(snowTires); // Рекурсия
    }
  }
  changeTires(4);

  // Циклические операторы
  // while
  let n = 0;
  while (n < 5) {
    console.log(n);
    n++;
  }

  // do while

  do {
    console.log(n);
    n++;
  } while (n < 5)

  // for

  for (let i = 0; i < 5; i++) {
    if (i === 2) {
      continue; // Прекратить текущую итерацию цикла и перейти к следующей
    }
    if (i === 3) {
      break; // Выход из цикла
    }
    console.log(i)
  }

} // end lesson05

function lesson06(theme = 'Объекты, массивы') {
  // Два способа объявления объекта
  let obj = new Object();
  let car = {
    model: 'mazda',
    year: '2006'
  };

  car.turbocharging = true; // Добавление свойства объекта
  console.log('car.model: ', car.model); // Обращение к свойству объекта
  console.log('car.year: ', car['year']); // Альтернативный способ обращения к свойству объекта, Используя этот способ можно ключ делать с пробелами
  car['best place'] = 'city';
  let titleTrans = 'Коробка передач';
  let bodyTrans = 'Автоматическая';
  car[titleTrans] = bodyTrans; // => 'Коробка передач': 'Автоматическая'
  obj.color = 'black';
  car.style = obj; // Присвоение свойству car.style ссылки на объект obj
  console.log(car.style === obj); // => true
  console.log(car);
  car.style.color = 'red'; // Изменение свойства color объекта obj через ссылку на объект
  console.log(obj.color); // => 'red'

  // Объекты могут содержать любые типы данных
  let car1 = {
    model: 'mazda',
    year: 2006,
    turbocharging: true,
    specifications: [],
    style: {
      color: 'blue'
    }
  };
  // Функция внутри объекта называется методом объекта
  car1.ride = function (speed) {
    console.log('Машина едед с скоростью ' + speed + ' км/ч');
  };
  car1.ride(50);

  function stop() {
    console.log('Машина стоит на месте');
  }
  car1.stop = stop;
  car1.stop();

  // Массивы
  // В JavaScript массив - это объект в котором ключи заполняются автоматически, начальный индекс - 0
  let arr = [1, 2, 3, 4],
    arr1 = [, , , , 5], // => массив в котором первые 4 элемента пустые, пятый храниет 5
    newArray = new Array(1, 2, 3, 4); // Если передать только 1 аргумент - он станет длинной массива
  newArray.length = 3; // Установить длинну массива - 3 элемента, лишние элементы будут удалены, если длинна массива больше количества имеющихся элементов массива - оставшиеся 'ячейки' будут пустыми
  console.log(arr[0]); // => '0', обращение к элементу массива
  // Если обратиться к не существующему элементу массива - получим undefined
  console.log(arr.length); // => '4', Узнать длинну массива, длинна массива всегда на 1 больше индекса последнего элемента массива
  arr[arr.length] = 5; // добавить в конец массива новый элемент, не рекомендуется использовать этот способ
  // На самом деле lenght - это не длинна массива, а индекс его последнего элемента
  // В массив можно добавить элемент с произвольным индексом, все 'промежуточные' элементы будут пустыми
  arr[10] = 'hello'; // элементы с индексом 6, 7, 8, 9 будут пустыми
  console.log(arr);

  // Методы работы с массивами

  let array = ['Apple', 'Orange', 'Banana'];

  array.push('kiwi'); // Добавить элемент 'kiwi' в конец массива, можно добавить несколько элементов через запятую
  array.unshift('papaya', 'mango'); // добавить один или несколько элементов в начало массива

  array.pop(); // Удаляет последний элемент массива, возращает значение удаленного элемента
  console.log(array.pop()); // => 'kiwi'

  array.shift(); // Удаляет первый элемент массива, возвращает значение удаленного элемента

  array.sort(); // Сортирует массива по алфавиту, учитывает регистр

  array.slice(1, 3); // Возвращает массив в диапазоне указанных индексов(в данном случае 2й и 3й элемент массива);
  array.slice(-2); // Вернет два последних элемента массива

  // array.splice(индекс, кол-во элеменетов, добавляемые элементы через запятую); Удаляет указанное кол-во элементов массива начиная указанного индекса и на место укаденных элементов вставляет элементы указанные через запятую. Возвращает удаленные элементы.
  array.splice(1, 1, 'Avocado', 'Papaya'); // Удалить второй элемент массива 'Orange', и вместо него вставит два элемента: 'Avocado' и 'Papaya'

  array.join(', '); // Возращает строку состоящую из элементов массива разделенных разделителем указанным в скобках( в данном случае ', '), по умолчанию элементы массива разделяются только запятой(без пробела)

  array.reverse(); // Возращает массива в обратном порядке. ВАЖНО - изменяет текущий массива.

  array.concat(['avocado', 'papaya', 'kiwi']); // Возвращает НОВЫЙ массив состоящий из исходного массива соединенного с указанным в скобках массивом или указанными элементами массива

  // Цикл for in (перебор всех свойст в объекте) 

  let car2 = {
    model: 'mazda',
    year: 2006,
    turbocharging: true,
    specifications: [],
    style: {
      color: 'blue'
    }
  };

  for (let key in car2) {
    console.log('Ключ: ' + key + ' Значение: ' + car2[key]);
  }

  console.log(Object.keys(car2).length); // Узнать сколько свойств у объекта  сфк2

  // Перебор массива
  let arr = [1, 2, 3, 4, 5];

  for (let i = 0; i < arr.length; i++) {
    console.log(arr[i]);
  }

  arr.forEach(function (item, index, array) {
    console.log(item, index, array);
  })

  for (let item of arr) {
    console.log(item); // Выведет значение элемента массива
  }

  for (let item in arr) {
    console.log(item); // Выведет индекс элемента массива
  }

  delete arr[3]; // Удалить 4-й элеменет массива, вместо него будет undefined

  let obj = {
    a: 3,
    b: true,
    c: 'js'
  };

  delete obj.b;
  console.log(obj); // => 'a: 3, c: 'js''

  // Псевдомассив - объект похожий по структуре на массив, но не имеющий методов работы с массивами

} // end lesson06

function lesson07(theme = 'API DOM, работа с страницей') {
  // API - applicataion programming interface
  // DOM - document object model, объектная модель документа
  // BOM - browser object model

  document.getElementById('#id'); // Получить элемент с указанным id

  document.getElementsByTagName('h1'); // получить html-коллекцию элементов по тегу

  document.getElementsByClassName('class_name'); // Получить html-коллекцию элементов по классу, чтобы получить конкретный элемент из коллекции нужно вторым параметром указать в квадратных скобках его порядковый номер
  document.getElementsByClassName('class_name' [1]);

  document.querySelector('h1'); // Получить элемент по селектору: #id, .class, tag-name

  document.querySelectorAll('h1'); // Получить колекцию элементов по селектору

  // Преймущество использования querySelector в том, что коллекция nodelist имеет метод forEach для ее перебора

  let myElem = document.querySelector('.hello');

  myElem.setAttribute('style', 'font-size: 24px'); // Добавить атрибут style

  console.log(myElem.getAttribute('id')); // Вывести значение аттрибута id элемента .hello
  console.log(myElem.className); // Выведет строку с всеми классами элемента
  console.log(myElem.classList); // Вывести коллекцию с классами

  myElem.classList.add('js'); // Добавить класс js
  myElem.classList.remove('hello'); // Удалить класс hello

  let collect = document.querySelectorAll('.collections'), // => ul
    elem = document.querySelectorAll('.elem'); // => li

  collect[0].removeChild(elem[3]); // Удалит 4-й li в первом ul

  collect[1].appendChild(elem[3]); // Переместит элемент 4 в конец списка 1

  collect[0].insertBefore(elem[4], elem[2]); // переставить 4-й элемент перет 2-м элемементом
  collect[0].insertBefore(elem[4], null); // переставить в конец

  collect[0].replaceChild(elem[4], elem[2]); // Удаляет элемент2 и заменяет его элементом4, возвращает удаленный элемент

  let elemClone = elem[2].cloneNode(); // Скопировать элемент2 без его содержимого(детей - текста внутри li)
  elemClone = elem[2].cloneNode(true); // Скопировать элемент2 с всем его содержимым(потомками)
  collect[1].appendChild(elemClone); // добавить в список1 копию элемент2

  // Создание DOM-элементов

  console.log(collect[0].innerHTML); // Возвращает разметку внутри коллекции
  console.log(collect[0].textContent); // Возвращает текст внутри элемента

  let newElem = document.createElement('li'); // создали элемент li
  newElem.textContent = 'Новый элемент';
  collect[1].appendChild(newElem);












} // end lesson07

function lesson08(theme = 'Обработчики событий. Особенности их работы') {
  // addEventListener - Добавить слушатель событий
  let square = document.querySelector('.square');
  square.addEventListener('click', function () {
    console.log('Функция 1');
  });
  square.addEventListener('click', function () {
    console.log('Функция 2');
  });
  square.addEventListener('click', function () {
    console.log('Функция 3');
  });
  // Чтобы обработчик событий можно было удалить нужно указывать именную функцию:
  let count = 0;
  let clicked = function () {
    count++;
    if (count === 3) {
      square.removeEventListener('click', clicked);
    }
    console.log('Произошел клик по элементу');
  };
  square.addEventListener('click', clicked);

  // У каждого события есть объект события. Этот объект доступен только фукции-обработчику события. Чтобы его получить нужно первым параметром фукции-обработчика указать его имя. Называть его можно как-угодно, но приято его называть 'event' или 'e'.

  let eventFunc = function (event) {
    console.log(event.type);
  };
  square.addEventListener('click', eventFunc); // Срабатывает при клике(кнопка нажата и отпущена в пределах элемента)
  square.addEventListener('mouseup', eventFunc); // Срабатывает когда кнопка мыши была зажата на пределами элемента, а отпущена в пределах элемента
  square.addEventListener('mousedown', eventFunc); // Срабатывает при нажатии кнопки кнопки миши на элементе, но если кнопка была отпущена за пределами элемента
  // Обработчики отработают в следующем порядке:
  // 1) mousedown
  // 2) mouseup
  // 3) click
  square.addEventListener('mouseenter', eventFunc); // Сработает когда указатель попадет на область элемента
  square.addEventListener('mouseleave', eventFunc); // Сработает когда указатель покинет область элемента
  square.addEventListener('mouseover', eventFunc); // Срабатывает при наведении на элемент и на внутренний элемент(на детей)
  square.addEventListener('mouseout', eventFunc); // Срабатывает при наведении на элемент и на внутренний элемент(на детей)
  square.addEventListener('mousemove', eventFunc); // Срабатывает при перемещении указателя мышки над элементом.

  // События возникающие при работе с формами
  document.querySelector('#text').addEventListener('input', eventFunc); // Событие input происходит когда мы меняем состояние(value) элемента input: ввода, изменение, изменение значения.
  document.querySelector('#text').addEventListener('change', eventFunc); // Событие change происходит когда элемент теряет фокус(уходим с инпута), событие запоминает состояние value элемента до фокуса и сравнивает его с value после фокуса, если оно отличается - сработыает обработчик события.
  document.querySelector('#text').addEventListener('keydown', eventFunc); // Срабатывает при нажатии кнопки(будет срабатывает при зажатии кнопки)
  document.querySelector('#text').addEventListener('keyup', eventFunc); // Срабатывает когда отпускают нажатую кнопку
  document.querySelector('#text').addEventListener('focus', eventFunc); // Срабатывает при нажатии на элемент(когда мы его берем в фокус)
  document.querySelector('#text').addEventListener('input', eventFunc); // Срабатывает при потере фокуса(когда мы нажимаем на какое-либо другое место)

  document.querySelector('#range').addEventListener('change', eventFunc); // Срабатывает при перемещении ползунка элемента range, при его срабатывании можно получить значение value элемента и работать уже с ним.

  document.addEventListener('DOMContentLoaded', function () {
    console.log('Страниаца загрузилась')
  }); // Сработает когда DOMдерево посностью загрузится, обычно в тело обработчика помещается весь JS код.

  window.onbeforeunload = function () {
    console.log('Вы точно хотите покинуть страницу?')
  }; // Сработает если пользователь попробует закрыть вкладку.

  // event.PreventDefault - отмена стандартного поведения элемента
  document.querySelector('#link').addEventListener('click', function (event) {
    event.preventDefault();
    console.log('click');
  });

  document.addEventListener('contextmenu', function (event) {
    event.preventDefault();
  }); // Отключение контекстного меню(правая кнопка мыши) на сайте

  // Всплытие-перехват
  // Перехват(захват) - событие сначала срабатывает на document>html>body... и постепенно погружаясь к дочерним элементам
  // Всплытие наоборот от дочернего к родительским









} // end lesson08

function lesson09(theme = 'Контекст вызова - this') {
  // this - сслыка на какой-то объект
  // call site - точка вызова функции
  // call stack - стэк вызова функции
  // 4 правила this:
  // 1) Привязка по умолчанию:
  function test() {
    console.log('hello', this); // В данном случае this ссылается на window 
    // this всегда существует только внутри функции и определяется в зависимости от того где и как эта функция вызывается. Контекстом вызова может быть только объект.
    // Если функция вызывается без точки "."(без привязки к объекту) то контекстом вызова будет window
    // В строгом режиме вместо window будет undefined
  }
  test();

  // 2) Не явная привязка:
  let obj = {
    x: 10,
    y: 15,
    test: newTest
  };

  let obj2 = {
    x: 20,
    y: 20,
    testObj: obj
  };

  function newTest() {
    console.log(this.x);
  };

  obj.test(); // Контекстом вызова будет объект obj. => 10.
  obj2.testObj.test(); // => 10, this ссылается на х = 10, поскольку контекстом вызова выстуавет последний указанный объект - testObj;

  let foo = obj.test;
  foo(); // Контекстом вызова будет window. В данном случает будет работать привязка по умолчанию.

  // 3) Явная привязка:
  let obj = {
    x: 10,
    y: 15
  }

  function newTest() {
    console.log('this: ', this);
  }

  newTest.apply(obj); // Ссылается на obj, apply первым параметром принимает объект к которому осущетвляется привязка, вторым параметром принимает массив аргументов короый будет разобран и передан в функцию которую мы вызывем
  newTest.call(obj); // Ссылается на obj, call первым параметром принимает объект к которому осущетвляется привязка, принимает сколько угодно параметром переданных через запятую

  // Жесткая привязка - использование call или apply внутри функции
  function hardBind(hard) {
    newTest.call(obj); // жесткая привязка
    newTest.call(hard);
  };
  hardBind(); // Вызывается функция newTest с привязкой к обхекту obj.
  hardBind(obj); // В качетсве объекта к которому будет применяться жесткая привязка указываетс имя объекта во время вызова.

  let obj = {
    x: 10,
    y: 15
  };

  function newTest() {
    console.log('this: ', this);
  };
  let foo = newTest.bind(obj); // Явная привязка

  // 4) Привязка new:
  // Если объект создан через функцию-конструктор - то this будет указывать на созданный объект

} // end lesson09

function lesson10(theme = 'ООП. Наследование, прототипы, конструкторы и классы') {
  // JavaScript - прототипно-ориентированый язык программирования
  // Прототип - скрытая ссылка объекта
  // Прототип - это объект из которого текущий объект черпает недостающие методы и свойства
  let arr = [1, 2, 3, 4, 5];

  console.log(arr);
  // Все функции и свойства можно посмотреть при выводе объекта в консоль, весь список свойсв и методов будет в разделе __proto__.
  console.log(arr.__proto__ === Array.prototype); // => true , прототип у созданного объекта arr и у объекта Array будет один.

  let car = {
    doors: 4,
    turbocharging: false,
    ride: function () {
      console.log('Машина едет')
    }
  };

  let newCar = Object.create(car); // Создание объекта newCar прототипом которого будет объект car
  console.log(newCar); // В разделе __proto__ будут свойства из объекта car и его прототипа
  newCar.model = 'mazda 3';
  console.log(newCar.hasOwnProperty('model')); // => true , Метод проверяет есть ли указанное свойство у объекта, возвращает булеевое значение(true/false), этот метод не видит свойства прототипа.
  console.log(newCar.__proto__.hasOwnProperty('model')); // => false , проверка наличия свойства у прототипа

  console.log(car.isPrototypeOf(newCar)); // => true , метод проверяет является объект car прототипом для newCar.

  // Конструкторы
  // Функция-конструктор - это функция которая имеет локальные переменные которая используется для описания какой-то сущности.
  // Функции-конструкторы принято называть с большой буквы
  function Car() {
    this.model = 'Mazda';
  };

  let car1 = new Car(); // this будет указывать на car1;
  console.log(car1); // При выводе в консоле у объекта будет пометка 'Car' подсказывающая, что этот объект был создан через функцию-конструктор. Если открыть описание объект car1, в разделе __proto__ будет пометка 'constructor: Car()'.

  Car.prototype.ride = function () {
    console.log('Ехать');
  }; // Добавить новый метод ride в прототип конструктора Car. У созданного при помощи коструктора Car объекта в прототипах будет доступен метод ride.

  car1.ride(); // => 'Ехать', вызов метода прототипа

  function Car(model, color) {
    this.model = model;
    this.color = color;
  };
  Car.prototype.ride = function () {
    console.log('Ехать');
  };
  let car1 = new Car('Mazda', 'Red');
  car1.ride();
  console.log(car1); // => model: 'Mazda', color: 'Red';

  // Добавление метода в прототип функции-конструктора делается для экономии памяти, чтобы не создавать метод в кажном новом объекте метод создают единажды в прототипе объекта.

  // Классы в JavaScript
  // ООП - подход к решению задачи манипулируя объектами
  // Класс - абстрактная единица описывающая объект
  // В ООП любой объект должен быть создан на основании класса, должен существовать класс который декларирует создаваемый объект, описывает его структуру

  function Car(brand, model, options) {
    this.brand = brand;
    this.model = model;
    options = options || {};
    this.color = options.color;
    this.transmission = options.transmission;
  }; // Создание класса, который задает структуру но не создает объект.

  Car.prototype.ride = function () {
    console.log(this.brand + ' ' + this.model + ' поехала!');
  }

  let car1 = new Car('mazda', '3', {
    color: 'blue'
  }); // Объект созданный на основе класса Car
  let car2 = new Car('BMW', 'X3', {
    ABS: true
  }); // Свойство 'ABS: true' будет проигнорировано посколько оно не было задекларировано к функции-конструкторе.

  car2.ride(); // => 'BMW X3 поехала!'
  // Все объекты созданные на основании класса будут разными, а поведение у них будет общим

  console.log(Car.prototype.isPrototypeOf(car1)); // Проверка вляется Car прототипом для car1
  console.log(car2 instanceof Car); // То-же самое

  // Наследование в JavaScript
  function Car(countryBuild, options) {
    this.countryBuild = countryBuild;
    options = options || {};
    this.color = options.color;
    this.transmission = options.transmission;
  };

  Car.prototype.ride = function () {
    console.log(this.brand + ' ' + this.model + ' поехала!');
  };

  function Audi(countryBuild, options, model, type) {
    this.brand = 'Audi';
    Car.apply(this, arguments); // Наследование
    this.model = model;
    this.type = type;
  }; // Данный класс имеет те-же параметры, что и класс Car, а также свои параметры

  Audi.prototype = Object.create(Car.prototype); // Добавить содержимое прототипа Car прототипу Audi
  Audi.prototype.constructor = Audi; // установить Audi коструктором для Audi

  // Наследование - это отношения между классами при котором класс использует структуру или поведение другого класса(одиночное наследование), или других классов(множественное наследование)

  let car_q7 = new Audi('germany', {
    color: 'red'
  }, 'Q7', 'S');

  console.log(car_q7);
  console.log(car_q7 instanceof Audi); // => true
  console.log(car_q7 instanceof Car); // => true

  car_q7.ride(); // => 'Audi Q7 поехала'




} // end lesson10

function lesson11(theme = '') {

} // end lesson11

function lesson12(theme = '') {

} // end lesson12

function lesson13(theme = '') {

} // end lesson13

function lesson14(theme = '') {

} // end lesson14

function lesson15(theme = '') {

} // end lesson15

function lesson16(theme = '') {

} // end lesson16

function lesson17(theme = 'Работа с JSON, AJAX, Получение и отправка данных на сервер') {

  // AJAX позволяет менять содержимое страницы без ее перезагрузки.
  // JSON - javascript object notation, текстовый формат данных, набок ключей и значений.
  // JSON используется для отправки данных на сервер.

  // Пример использование JSON с объектом:

  const smartphone = {
    brand: 'samsung',
    screen: 5.5,
    rom: 128,
    ram: 4,
    gps: true,
    sensor: ['Accelerometer', 'E-compass', 'Fingerprint Sensor', 'Gyroscope'],
    camera: {
      back: [32, 5, 8],
      front: 16
    }
  };

  // В JS есть объект для работы с JSON, называется JSON. У него есть два метода: parse() и stringify().

  // Выведем в консоле объект JSON:
  console.log(JSON);

  // Метод stringify() переводит объект в формат JSON:
  const jsonSmart = JSON.stringify(smartphone);

  console.log(jsonSmart);
  // В файле JSON не может содержаться одинарных кавычек, все ключи и их значения записываются в двойных кавычках(автоматически преобразовует одинарные кавычки в двойные). На выходе метода JSON.stringify(smartphone) мы получим:
  // {"brand":"samsung","screen":5.5,"rom":128,"ram":4,"gps":true,"sensors":["Accelerometer","E-compass","Fingerprint Sensor","Gyroscope"],"camera":{"back":[32,5,8],"front":16}} Все одной строкой.

  // Метод parse() переводит переменную формата JSON в объект:

  Console.log(JSON.parse(jsonSmart));

  // Работа с JSON и AJAX

  document.addEventListener('DOMContentLoaded', () => {
    'use strict';

    const select = document.getElementById('cars'),
      output = document.getElementById('output');

    const request = new XMLHttpRequest(); /* Создаем экземпляр XML запроса */

    // У объекта XMLHttpRequest есть метод open() который используется для инициализации запроса, его синтаксис: open('метод получение/отправки данных', 'путь к сервере/файлу', true/false(asinc - установить многопоточную обработку или ждать отклика от сервера, по умолчанию -  true), login, password) последние три параметра не обязательные.

    request.open('GET', './cars.json');

    // Метод setRequestHeader() - устанавливает заголовок запроса

    request.setRequestHeader('Content-type', 'application/json');

    // Метод send() открывает соедининение и отправляет запрос:

    request.send();

    // События XMLHttpRequest: loadstart, progress, abort, timeout, load, error, loadend, readystatechange

    /* Необходимо запускать до передачи заголовка и тела запроса

      request.addEventListenet('loadstart', (event) => {
        console.log(event);
      })

    */
    // progress срабатывает во время получения данных от сервера
    // abort срабатывает про использование метода abort() во время выполнения запроса
    // load срабатывает при успешном завершении запроса
    // error срабатывает когда запрос завершился ошибкой
    // loadend срабатывает при завершении засобития через load, error или abort.(не кроссбраузерный)
    // readystatechange срабатывает несколько раз за запрос, имеет 5 состояний:
    /* 0 - при создании запроса до вызова open(),
       1 - при вызове open(),
       2 - при вызове sent() и полученны заголовки,
       3 - при загрузке тела и свойство responseText может созадержать часть данных
       4 - при завершении передачи данных от сервера. */
    request.addEventListener('readystatechange', (event) => {
      if (request.readyState === 4 && request.status === 200) {
        // request.status содержит числовое значение код состояния http ответа сервера, пока статус не равен 200 нам ничего делать не нужно.
        // request.statusText - текстовоя содержание состояния сервера.
        const data = JSON.parse(request.responseText);
        data.cars.forEach(item => {
          /* перебормассива данных */
          if (item.brand === select.value) {
            const {
              brand,
              model,
              price
            } = item; /* деструктуризация */
            output.innerHTML = `Тачка ${brand} ${model} <br>
          Цена: ${price}$`
          }
        });
        // request.response - тело ответа от сервера(передаваемые данные) 
        // request.responseText - текст передаваемый запросом от сервера
      } else {
        output.innerHTML = 'Произошла ошибка';
      }
    });
  });

  // Важно!!!
  // У инпута обязательно должен быть атрибут name, если его не будет - то при отправке у данных не будет ключа и отправка не сработает!

  // Как отправлять данные ввиде formData или же ввиде json зависит от того какой тип данных понимает сервер. Тип передаваемых данных указывается в шапке запроса.

} // end lesson17

function lesson18(theme = 'Контекст выполнения, асинхронное выполнение, стек вызовов и event loop') {

  // Ключевое слово dubugger; - это метка на которой приостановится выполнение кода
  // Программа приостановится только если открыта консоль.
  // В Call Stack функция попадае в момент её вызова и убирается при завершении выполнения.
  // Функции добавляются в Call Stack сверху вниз и убираются тоже сверху вниз.
  // На пример если одна функция вызывает другую то в стек сначала добавится первая функция, потом вызванная ею функция, после того как вторая функция отработает она будет удаленна из стека и продолжится выполнения первой функции, после того как первая функция завершится - она тоже будет удалена из стека.
  // Если при выполнении функции вызванной другой функцией возникнет ошибка - в консоль будет выведен весь Call Stack.
  // Call Stack можно переполнить если вызвать функцию 16000 раз.
  // Это можно сделать через самовызывающуюся функцию.
  // Если Call Stack будет переполнен в консоли будет выведено сообщение о переполнении и последний стек вызова.

  // При работе с setTimeout расчет времени производится не в js, а в web api.

  //          Promise

  // Промисы - callback function 
  const promise = new Promise();
  // Можно не используя переменную создать promise, в таком случае return после промиса писать не нужно.
  // return new Promis(() => {});
  // Функция new Promise() в качестве параметра принимает executive function(функция-исполнитель) которая будет выполнять определенные действия:
  const doUniversity = (docs) => {
    return new Promise((resolve, reject) => {
      if (docs) {
        console.log('Рассмотрение документов...');
        setTimeout(() => {
          if (Math.random() > 0.3) {
            let result = 'Принят';
            resolve(result); // выполнится первая функция .then((1), (2)), если будет указанно несколько resolve подряд, то выполнится только первый.
          } else {
            reject('Отказано'); // выполнится вторая функция .then((1), (2)), если будет указанно несколько reject подряд, то выполнится только первый.
          }
        }, 3000);
      } else {
        reject('Отказано, не хватает документов');
      }
    });
  };
  const doArmy = (docs) => {
    return new Promise((resolve, reject) => {
      if (docs) {
        console.log('Военкомат думает...');
        setTimeout(() => {
          if (docs === 'Принят') {
            resolve('Отсрочка');
            console.log('Отсрочка');
          } else {
            reject('Повестка');
          }
        }, 2000);
      } else {
        reject('Повестка');
      }
    });
  };
  const doWork = (docs) => {
    return new Promice((resolve, reject) => {
      console.log('Директор Google думает...');
      setTimeout(() => {
        if (Math.random() > 0.3) {
          let result = 'Приглашаем на собеседование в Google в понедельник';
          resolve(result);
        } else {
          reject('Отказано иди в Яндекс!');
        }
      }, 3000);
    });
  };

  const dance = (docs) => {
    console.log('Потанцевали');
    return docs;
    // return Promise.resolve(docs); - Принудительно возвращает положительный результат
    // return Promise.reject(docs); - Принудительно возвращает отрицательный результат
  };

  // У промисов есть метод .then() который обрабатывает последствия обещания.
  const documents = ['Паспорт', 'Аттестат'];
  doUniversity(documents)
    .then((result) => {
      console.log(result);
      return result; // передаст результат в следующий .then()
    })
    .then(doArmy)
    .then(dance)
    .then(doWork)
    .catch((reason) => {
      console.error(reason)
    })
    .finnaly(() => console.warn('Выполнится в любом случае'));

  // метод .catch() обрабатывает все возвражения в случае если любая из функций doUniversity, doArmy, doWork вернет отрицательный promise.
  // пока promis ожидает окончание setTimeout он находится в режиме ожидания(panding), если promis выполнен успешно он перейдет в состояние full filled. Если промис завершится ошибкой(не удачей) он перейдет в состояние reject.
  // Последний .then стоящий после .catch выполнится в любом случае(УстарелБ теперь используют .finally)

  // Promise.all([]) - метод который будет дожитаться выполонения всех промисов указанных в качестве параметров. В качестве параметров указывается массив промисов.

  const doWorking = (company) => {
    return new Promise((resolve, reject) => {
      const time = Math.ceil(Math.random() * 3000);
      setTimeout(() => {
        if (item % 5) {
          resolve(company);
        } else {
          reject(company);
        }
      }, time);
    });
  };

  const hh = doWorking('HH'),
    yandex = doWorking('Yandex'),
    ozone = doWorking('Ozone'),
    pikabu = doWorking('Pikabu'),
    politics = doWorking('Гос Дума');

  Promise.all([hh, yandex, ozone, pikabu, politics])
    .then(result => console.log(`Тебя пригласили на собеседование в: ${result}`))
    .catch(result => console.error(`Компания ${result} отказала`));

  // Promise.race - метод который допустит к .then первый отработавший промис
  Promise.race([hh, yandex, ozone, pikabu, politics])
    .then(result => console.log(`Тебя пригласили на собеседование в: ${result}`))
    .catch(result => console.error(`Компания ${result} отказала`));

} // end lesson18

function lesson19(theme = 'Fetch') {
  // Fetch - api для получения данных с сервера.
  // Функция fetch является методом объекта window. В качестве первого параметра принимает url-адресс, в качестве второго параметра получает объект с настройками. Функция fetch возвращает промисы которые нужно обрабатывать при помощи .then и .catch. 
  // thorw - исключение при работе с .then, Прерывает выполнение .then и отправляет в .catch.
  // new Error - конструктор ошибок.
  // body у fetch - тело ответа от сервера. Передается ввиде ReadebalStream. 
  // Обработка получаеммых через fetch данных: json, block, text.
  // Настройки fetch
  // 1) Метод передачи данных, по умолчанию GET: method: 'GET
  // 2) Mode - режимы правил ограничения доменов, по умолчанию same-origin, cors - для получения данных со стороннего сервера.
  // 3) cache - режим кеширования, по умолчанию default
  // 4) credentials - указывает можно ли передавать учетные данные вместе с запросом
  // 4) headers - объект с заголовками
  // 5) redirect - поведение при редиректе: follow -  автоматическая переадресация, mellow - ручная переадресация, error -  ошибка пре переадресации.
  // 6) referrer - позволяет указать откуда пришел запрос
  // 7) body - тело запроса: JSON.stringify();

  // Настройка webpack и babel для работы с js
  // установака webpack dev server
  // npm install --save-dev webpack-dev-server
  // Настройка package.json:
  // "scripts": {
  //   "dev": "webpack-dev-server --open --mode=development",
  //   "build": "webpack mode=production"
  // }
  // Для настройки webpack нужно в корневой папке проекта создать файл webpack.config.js
  // Нужно установить npm i path -D
  // Настройка webpack.config.js :
  // const path = require('path');
  // module.exports = {
  //   entry: {
  //     main: './src/index.js'
  //   }, // Точка входа, можно указать объект с точками входа
  //   output: { // Точка выхода
  //     path: path.resolve(__dirname, './dist'),
  //     filename: '[name].js',// если точка входа одна можно указать bundle.js, если несколько точек входа желательно указывать [name].js
  //     publickPath: '/dist'
  //   }
  // };
  // npm run dev - запустить проект в режиме разработки
  // В режиме разработки папка dist не будет создана
  // Установка balel: npm install -D babel-loader @babel/core @babel/preset-env
  // Настройки babel:
  // Создать файл .babelrc :
  // {
  //   "presets": ["@babel/preset-env"]
  // }

  // Установка полифила forEach
  // npm i nodelist-foreach-polyfill
  // После его нужно импортировать в index.js
  // import 'nodelist-foreach-polyfill';

  // Устновка babel-polyfill
  // npm install --save @babel/polyfill
  // import '@babel/polyfill';

  // Установка closest-polyfill
  // npm i element-closest
  // import elementClosest from 'element-closest'; Импорт полифила
  // elementClosest(window);  Вызов

  // Установка полифила formData
  // npm i formdata-polyfill
  // import 'formdata-polyfill';

  // Установка Promise polyfill
  // npm i es6-promise
  // import 'es6-promise';

  // Установка Fetch polyfill
  // npm i fetch-polyfill
  // import 'fetch-polyfill';

  // npm run build - сборка проекта на продакшн

} // end lesson19

function lesson23(theme = 'try, catch') {
  // конструкция try catch позволяет перехватывать ошибки
  // Код заключенный в try выполняется по умолчанию, а код заключенный в catch будет выполняется только в том случае, если при выполнении кода заключенного в try возникла ошибка.
  try {
    console.log('hello');
  } catch (error) {
    console.log(error);
  }
  // При использовании конструкции try catch даже в случае возникновения ошибки код продолжит работать.
  // В конструкцию try catch можно добавить блок finally который будет выполняться в любом случае.
  try {
    console.log('try');
  } catch (error) {
    console.log(error);
    console.log(error.name);
    console.log(error.message);
    console.log(error.stack); /* выводится по умолчанию */
  } finally {
    // Блок finally используется очень редко.
  }

  //          async await
  // Объявление function decloration при работе с async
  async function funcFirst() {
    return 'hello';
  };
  // Объявления function expression при работе с async
  const fucnTwo = async function () {
    return 'hello';
  };
  // Объявления arrow function при работе с async
  const funcThree = async () => {
    return 'hello';
  };
  // jshint не поддерживает async
  // async функции всегда возвращают Promise которые можно обработать при помощи then
  const funcThree = async () => {
    return 'hello';
  };
  funcThree().then(res => console.log(res) /* Выведет в консоль возврощаемые промисом данные */ ).catch(error => console.warn(error) /* Отработает если async функция вернет ошибку */ );

  // await сказывается на выражения, если await функция является промисом - то async функция будет преостановленна до тех пор пока промис не выполнится, если выражение не является промисом - то оно будет конвертироваться в промис.

} // end lesson23